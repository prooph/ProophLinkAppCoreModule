<div class="row">
    <div class="col-md-3">
        <p class="text-info text-btn-align"><strong><?php echo $this->translate('Ticker Interval')?></strong></p>
    </div>
    <div class="col-md-3">
        <p id="system_js_ticker_interval" class="text-btn-align" onclick="{ onIntervalClick }">3 <?php echo $this->translate('Seconds')?></p>
    </div>
    <div class="col-md-3">
        <button id="system_js_ticker" class="btn btn-default" onclick="{ onToggleTicker }"><?php echo $this->translate('disabled'); ?></button>
    </div>

</div>
<script type="text/javascript">
    function (context) {
        this.app = context.app;

        var self = this;

        this.onToggleTicker = function (e) {
            self.toggleTicker(true);
        }

        this.onIntervalClick = function (e) {
            var $p = $(e.target).closest('p');

            if (! $p.hasClass("edit")) {
                var interval = parseInt($p.html());

                console.log(interval);

                var $input = $('<input>').attr('type', 'text').addClass('form-control interval_input')
                    .val(interval)
                    .data('old-val', interval);

                $p.toggleClass('text-btn-align edit');

                $p.html($input);

                e.stopPropagation();

                self.registerBlurForInterval();
            }
        }

        this.registerBlurForInterval = function () {
            $("body").one("click", function (e) {
                if ($(e.target).hasClass('interval_input')) {
                    self.registerBlurForInterval();
                } else {
                    //Blur interval
                    $p = $('#system_js_ticker_interval');

                    var interval = parseInt($p.find('input').val());

                    if (!_.isNumber(interval) || interval <= 0) {
                        interval = parseInt($p.find('input').data('old-val'));
                    }

                    $p.toggleClass('text-btn-align edit');

                    self.setTickerInterval(interval, true);
                }
            });
        }

        this.toggleTicker = function (saveChanges) {
            var $btn = $('#system_js_ticker'),
                enabled = false;

            if (typeof saveChanges == "undefined") {
                saveChanges = false;
            }

            if ($btn.hasClass('active')) {
                $btn.toggleClass('active');
                $btn.html('<?php echo $this->translate('disabled') ?>');
                enabled = false;
            } else {
                $btn.toggleClass('active');
                $btn.html('<?php echo $this->translate('enabled') ?>');
                enabled = true;
            }

            if (saveChanges) {
                this.app.js_ticker.enabled = enabled;
                    this.saveTickerConfiguration();
            }
        }

        this.setTickerInterval = function(interval, saveChanges) {
            if (typeof saveChanges == "undefined") {
                saveChanges = false;
            }

            $('#system_js_ticker_interval').html(interval + ' <?php echo $this->translate('Seconds')?>');

            if (saveChanges) {
                self.app.js_ticker.interval = interval;
                self.saveTickerConfiguration();
            }
        }

        this.saveTickerConfiguration = function () {
            $.postJSON('<?php echo $this->url('prooph.link/system_config/configure_js_ticker') ?>', this.app.js_ticker)
                .done(function (data) {
                    $.notify('Ticker <?php echo $this->translate('changes saved') ?>', 'success')
                })
                .fail($.failNotify);
        }



        $(function () {
            if (self.app.js_ticker.enabled) {
                self.toggleTicker(false);
            }

            self.setTickerInterval(self.app.js_ticker.interval, false);

        });
    }
</script>